---
title: "Subsetting data with dplyr"
teaching: 45
exercises: 12
questions:
- "How can I subset the number of columns in my data set?"
- "How can I reduce the number of rows in my data set?"
objectives:
- "Use `select()` to reduce columns"
- "Use tidyselectors like `starts_with()` within `select()` to reduce columns"
- "Use `filter()` to reduce rows"
- "Understand common logical operations using `filter()`"
keypoints:
- "Using `select`"
- "Using tidyselectors"
- "Using filter"
- "Understanding logical operations"
source: qmd
---

```{r, include=FALSE}
source("../bin/chunk-options.R")
knitr_fig_path("03-")
```


## Motivation

In many cases, we are working with data sets that contain more data than we need, or we want to inspect certain parts of the data set before we continue.
Subsetting data sets can be challenging in base R, because there is a fair bit of repetition. 
This can make code difficult to readn and understand.

## The {dplyr} package

The [{dplyr}](https://cran.r-project.org/web/packages/dplyr/index.html) package provides a number of very useful functions for manipulating data sets in a way that will reduce the probability of making errors, and  even save you some typing time. As an added bonus, you might even find the {dplyr} grammar easier to read.

We're going to cover 6 of the most commonly used functions as well as using pipes (`%>%`) to combine them.

1. `select()` (covered in this session)
2. `filter()` (covered in this session)
3. `arrange()` (covered in this session)
4. `mutate()` (covered in next session)
5. `group_by()` (covered in Day 2 session)
6. `summarize()` (covered in Day 2 session)


## Selecting columns

Let us first talk about selecting columns. In {dplyr}, the function name for selecting columns is `select()`! Most {tidyverse} function names for functions are inspired by English grammar, which will help us when we are writing our code.

```{r, echo = FALSE}
knitr::include_graphics("../fig/selecting.gif")
```

We first need to make sure we have the tidyverse loaded and the penguins data set at hand.
```{r}
library(tidyverse)
penguins <- read_csv("data/penguins.csv")
```

To select data, we must first tell select which data set we are selecting from, and then give it our selection. Here, we are asking R to `select()` from the `penguins` data set the `island`, `species` and `sex` columns

```{r}
select(penguins, island, species, sex)
```

When we use `select()` we don't need to use quotations, we write in the names directly. We can also use the numeric indexes for the column, if we are 100% certain of the order of the columns:

```{r}
select(penguins, 1:3, 6)
```

In some cases, we want to remove columns, and not necessarily state all columns we want to keep. 
Select also allows for this by adding a minus (`-`)  sign in front of the column name you don't want.

```{r}
select(penguins, -bill_length_mm, -bill_depth_mm)
```

> ## Challenge 1
> Select the columns sex, year, and species from the penguins dataset.
> > ## Solution to Challenge 1
> >
> > ```{r}
> > select(penguins, sex, year, species)
> > ```
> {: .solution}
{: .challenge}

> ## Challenge 2
> Change your selection so that species comes before sex. What is the difference in the output?
> > ## Solution to Challenge 2
> >
> > ```{r}
> > select(penguins, species, sex, year)
> > ```
> > select does not only subset columns, but it can also re-arrange them. The columns appear in the order your selection is specified.
> {: .solution}
{: .challenge}

### Tidy selections

These selections are quite convenient and fast! But they can be even better. 

For instance, what if we want to choose all the columns with millimeter measurements? That could be quite convenient, making sure the variables we are working with have the same measurement scale.

We could of course type them all out, but the penguins data set has names that make it even easier for us, using something called tidy-selectors.

Here, we use a tidy-selector `ends_with()`, can you guess what it does? yes, it looks for columns that end with the string you provide it, here `"mm"`.

```{r}
select(penguins, ends_with("mm"))
```

So convenient! There are several other tidy-selectors you can choose, [which you can find here](https://dplyr.tidyverse.org/reference/select.html), but often people resort to three specific ones:

- `ends_with()` - column names ending with a character string  
- `starts_with()` - column names starting with a character string  
- `contains()` - column names containing a character string 

If you are working with a well named data set, these functions should make your data selecting much simpler. And if you are making your own data, you can think of such convenient naming for your data, so your work can be easier for you and others.

Lets only pick the measurements of the bill, we are not so interested in the flipper. Then we might want to change to `starts_with()` in stead.

```{r}
select(penguins, starts_with("bill"))
```

The tidy selector can be combined with each other and other selectors. So you can build exactly the data you want!

```{r}
select(penguins, island, species, year, starts_with("bill"))
```

> ## Challenge 3
> Select all columns containing an underscore ("_").
> > ## Solution to Challenge 3
> >
> > ```{r}
> > select(penguins, contains("_"))
> > ```
> {: .solution}
{: .challenge}

> ## Challenge 4
> Select the species and sex columns, in addition to all columns ending with "mm"
> > ## Solution to Challenge 4
> >
> > ```{r}
> > select(penguins, species, sex, ends_with("mm"))
> > ```
> {: .solution}
{: .challenge}

> ## Challenge 5
> De-select all the columns with bill measurements
> > ## Solution to Challenge 5
> >
> > ```{r}
> > select(penguins, -starts_with("bill"))
> > ```
> {: .solution}
{: .challenge}

### Tidy selections with `where`

The last tidy-selector we'll mention is `where()`. `where()` is a very special tidy selector, that uses logical evaluations to select the data. Let's have a look at it in action, and see if we can explain it better that way.

Say you are running a correlation analysis. For correlations, you need all the columns in your data to be numeric, as you cannot correlate strings or categories. Going through each individual column and seeing if it is numeric is a bit of a chore. That is where `where()` comes in!

```{r}
select(penguins, where(is.numeric))
```

Magic! Let's break that down. 
`is.numeric()` is a function in R that checks if a vector is numeric. If the vector is numeric, it returns `TRUE` if not it returns `FALSE`.

```{r}
is.numeric(5)
is.numeric("something")
```

Let us look at the penguins data set again
```{r}
penguins
```

The penguins data is stored as a `tibble`, which is a special kind of data set in R that gives a nice print out of the data.
Notice, right below the column name, there is some information in `<>` marks. This tells us the class of the columns. 
Species and island are factors, while bill columns are "double" which is a decimal numeric class. 

`where()` goes through all the columns and checks if they are numeric, and returns the ones that are. 

```{r}
select(penguins, where(is.numeric))
```


> ## Challenge 6
> Select only the columns that are factors from the `penguins` data set.
> > ## Solution to Challenge 6
> >
> > ```{r}
> > select(penguins, where(is.factor))
> > ```
> {: .solution}
{: .challenge}

> ## Challenge 7
> Select the columns `island`, `species`, as well as all numeric columns from the `penguins` data set.
> > ## Solution to Challenge 7
> >
> > ```{r}
> > select(penguins, island, species, where(is.numeric))
> > ```
> {: .solution}
{: .challenge}


## Filtering rows

Now that we know how to select the columns we want, we should take a look at how we filter the rows. 
Row filtering is done with the function `filter()`, which takes statements that can be evaluated to `TRUE` or `FALSE`. 

```{r, echo = FALSE}
knitr::include_graphics("../fig/filtering.gif")
```

What do we mean with statements that can be evaluated to `TRUE` or `FALSE`?
In the example with `where()` we used the `is.numeric` function to evaluate if the columns where numeric or not. We will be doing the same for rows!

Now, using `is.numeric` on a row won't help, because every row-value in a column will be of the same type, that is how the data set works. All values in a column must be of the same type. 

So what can we do? Well, we can check if the values meet certain criteria or not. Like values being above 20, or factors being a specific factor. 

```{r}
filter(penguins, body_mass_g < 3000)
```

Here, we've filtered so that we only have observations where the body mass was less than 3 kilos. 
We can also filter for specific values, but beware! you must use double equals (`==`) for comparisons, as single equals (`=`) are for argument names in functions. 

```{r}
filter(penguins, body_mass_g == 2900)
```

What is happening, is that R will check if the values in `body_mass_g` are the same as 2900 (`TRUE`) or not (`FALSE`), and will do this for every row in the data set. Then at the end, it will discard all those that are `FALSE`, and keep those that are `TRUE`.

> ## Challenge 8
> Filter the data so you only have observations from the "Dream" island.
> > ## Solution to Challenge 8
> >
> > ```{r}
> > filter(penguins, island == "Dream")
> > ```
> {: .solution}
{: .challenge}

> ## Challenge 9
> Filter the data so you only have observations after 2008
> > ## Solution to Challenge 9
> >
> > ```{r}
> > filter(penguins, year >= 2008)
> > ```
> {: .solution}
{: .challenge}

### Multiple filters

Many times, we will want to have several filters applied at once. What if you only want Adelie penguins that are below 3 kilos?
`filter()` can take as many statements as you want! Combine them by adding commas (,) between each statement, and that will work as 'and'.

```{r}
filter(penguins, 
       species == "Chinstrap",
       body_mass_g < 3000)
```

You can also use the `&` sign, which in R is the comparison character for 'and', like `==` is for 'equals'.
```{r}
filter(penguins, 
       species == "Chinstrap" &
         body_mass_g < 3000)
```

Here we are filtering the penguins data set keeping only the species "Chinstrap" **and** those below 3.5 kilos.
And we can keep going!

```{r}
filter(penguins, 
       species == "Chinstrap",
       body_mass_g < 3000,
       sex == "male")
```

> ## Challenge 10
> Filter the data so you only have observations after 2008, and from "Biscoe" island
> > ## Solution to Challenge 10
> >
> > ```{r}
> > filter(penguins, 
> >        year >= 2008,
> >        island == "Biscoe")
> > ```
> {: .solution}
{: .challenge}

> ## Challenge 11
> Filter the data so you only have observations of male penguins of the Chinstrap species
> > ## Solution to Challenge 11
> >
> > ```{r}
> > filter(penguins, 
> >        sex == "male",
> >        species == "Chinstrap")
> > ```
> {: .solution}
{: .challenge}

### The difference between `&` (and)  and `|`(or)

But what if we want all the Chinstrap penguins **or** if body mass is below 3 kilos? When we use the comma (or the &), we make sure that all statements are `TRUE`. But what if we want it so that _either_ statement is true? Then we can use the **or** character `|` .

```{r}
filter(penguins, 
       species == "Chinstrap" | 
         body_mass_g < 3000)
```

This now gives us both all chinstrap penguins, and the smallest Adelie penguins!
By combining AND and OR statements this way, we can slowly create the filtering we are after.

> ## Challenge 12
> Filter the data so you only have observations of either male penguins or the Chinstrap species
> > ## Solution to Challenge 12
> >
> > ```{r}
> > filter(penguins, 
> >        sex == "male" |
> >        species == "Chinstrap")
> > ```
> {: .solution}
{: .challenge}


# Wrap-up
Now we've learned about subsetting our data, so we can create data sets that are suited to our needs.
